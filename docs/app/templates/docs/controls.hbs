<div class="row">
  <div class="col-lg-7 order-2 order-lg-1">
    <section>
      <h5>Adding, removing and modifying map controls</h5>

      <p>Recall that almost anything you pass to the component is passed on as an option to the map. The options for controls are no exception. You can add or remove specific controls by setting the corresponding control variable to <var>true</var> or <var>false</var>. You can also pass in a <var>g-map/hash</var> to set further options. Learn more by following the guides at <GoogleDocs @section="controls" @type="guides">Controls Guide</GoogleDocs>.</p>

      <p>Let’s disable the default UI, make sure that we display the zoom control and move it to the top left.</p>

      <CodeSnippet @name="show-hide-controls.hbs" />

      <DocTip>
        Unfortunately, you have to reference the position using the constants defined under <var>google.maps.ControlPosition</var>. These actually map to integers that then define the position of the control. Now you wouldn’t normally have access to the <var>google</var> global in the template. A safe way of accessing it is via the <var>googleMapsApi</var> service. That way, when <var>google</var> is done initializing, the template will be updated with the position value.
      </DocTip>

      <CodeSnippet @name="safely-accessing-google.js" />
    </section>
    <section>
      <h5>Adding custom map controls</h5>

      <p>For more complex map UIs, you might want to add your own map controls to let the user initiate custom actions right from the map. Let’s try adding a button to the <var>top center</var> of the map that pans back to the center of London and sets the zoom level back to <var>12</var>.</p>

      <DocTip @badgeText="Test">
        Try out the custom control to recenter the map.
      </DocTip>

      <p>The <var>control</var> component accepts a <var>position</var> attribute and a block template. The <var>position</var> is a string that specifies the placement of the control on the map. It should be one of the control position constants defined in <GoogleDocs @section="control#ControlPosition">ControlPosition</GoogleDocs>. The component will map these to the correct <var>google.maps.controlPosition</var> behind the scenes. In our case, to place the control in the top center, we use <var>TOP_CENTER</var>. From there, we just bind an action to the button and pass the yielded map object.</p>

      <CodeSnippet @name="recenter-map-control.hbs" />

      <p>In the controller (or component), we handle the action and recenter the map to wherever we want.</p>

      <CodeSnippet @name="recenter-map-controller.js" />
    </section>

    <p>{{this.nextPage.text}}</p>
    <LinkToNext @nextPage={{this.nextPage}} />
  </div>
  <div class="col-lg-5 order-1 order-lg-2 sticky-top sticky-map">
    <GMap
      @lat={{this.london.lat}}
      @lng={{this.london.lng}}
      @zoom={{12}}
      @styles={{this.primaryMapStyle}}
      @disableDefaultUI={{true}}
      @zoomControl={{true}}
      @zoomControlOptions={{g-map/hash position=this.google.maps.ControlPosition.TOP_LEFT}}
      class="ember-google-map-responsive" as |g|>

      <g.marker @lat={{this.london.lat}} @lng={{this.london.lng}} />

      <g.control @position="TOP_CENTER">
        <div class="map-control">
          <button {{on "click" (fn this.recenterMap g.map)}} type="button" class="btn btn-light m-2">
            Recenter map
          </button>
        </div>
      </g.control>

    </GMap>
  </div>
</div>